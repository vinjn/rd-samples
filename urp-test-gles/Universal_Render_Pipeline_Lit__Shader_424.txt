#version 320 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _OcclusionStrength;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _OcclusionMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(6) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec4 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_17;
float u_xlat18;
mediump vec3 u_xlat16_20;
float u_xlat24;
mediump float u_xlat16_24;
uint u_xlatu24;
bool u_xlatb24;
float u_xlat30;
mediump float u_xlat16_32;
float u_xlat36;
mediump float u_xlat16_36;
uint u_xlatu36;
float u_xlat37;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    SV_Target0.w = u_xlat16_0.w * _BaseColor.w;
    u_xlat16_1.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;
    u_xlat16_2.xyz = u_xlat16_0.xyz * _BaseColor.xyz;
    u_xlat16_3.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_36 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    u_xlat16_38 = (-_OcclusionStrength) + 1.0;
    u_xlat16_38 = u_xlat16_36 * _OcclusionStrength + u_xlat16_38;
    u_xlat3.x = vs_TEXCOORD4.x;
    u_xlat3.y = vs_TEXCOORD5.x;
    u_xlat3.z = vs_TEXCOORD3.x;
    u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat3.x = vs_TEXCOORD4.y;
    u_xlat3.y = vs_TEXCOORD5.y;
    u_xlat3.z = vs_TEXCOORD3.y;
    u_xlat16_5.y = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat3.x = vs_TEXCOORD4.z;
    u_xlat3.y = vs_TEXCOORD5.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat16_5.z = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_5.xyz;
    u_xlat6.x = vs_TEXCOORD3.w;
    u_xlat6.y = vs_TEXCOORD4.w;
    u_xlat6.z = vs_TEXCOORD5.w;
    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat36 = max(u_xlat36, 1.17549435e-38);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat7.xyz = vec3(u_xlat36) * u_xlat6.xyz;
    u_xlat16_3.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_3);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_3);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_40 = (-u_xlat16_1.x) * 0.959999979 + 0.959999979;
    u_xlat16_5.x = u_xlat16_1.y * _Smoothness + (-u_xlat16_40);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
    u_xlat16_17.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_17.xyz = u_xlat16_1.xxx * u_xlat16_17.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = u_xlat16_5.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_1.y) * _Smoothness + 1.0;
    u_xlat16_8.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 6.10351563e-05);
    u_xlat0 = u_xlat16_8.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_8.x * u_xlat16_8.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_24 * _MainLightShadowParams.x + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb24 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb1 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb24 = u_xlatb24 || u_xlatb1;
    u_xlat16_32 = (u_xlatb24) ? 1.0 : u_xlat16_32;
    u_xlat16_44 = dot((-u_xlat7.xyz), u_xlat16_3.xyz);
    u_xlat16_44 = u_xlat16_44 + u_xlat16_44;
    u_xlat16_9.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_44)) + (-u_xlat7.xyz);
    u_xlat16_44 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_8.w = (-u_xlat16_44) + 1.0;
    u_xlat16_20.xz = u_xlat16_8.xw * u_xlat16_8.xw;
    u_xlat16_44 = u_xlat16_20.z * u_xlat16_20.z;
    u_xlat16_4.xyz = vec3(u_xlat16_38) * u_xlat16_4.xyz;
    u_xlat16_45 = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_45;
    u_xlat16_5.x = u_xlat16_5.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_1.w + -1.0;
    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.y;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz;
    u_xlat16_38 = u_xlat16_8.x * u_xlat16_8.x + 1.0;
    u_xlat16_38 = float(1.0) / u_xlat16_38;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_38);
    u_xlat16_9.xyz = (-u_xlat16_17.xyz) + vec3(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_44) * u_xlat16_9.xyz + u_xlat16_17.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_9.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;
    u_xlat16_38 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + _MainLightPosition.xyz;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = max(u_xlat24, 1.17549435e-38);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat36 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat24 = u_xlat24 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat36 * u_xlat36;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat36 = max(u_xlat16_38, 0.100000001);
    u_xlat24 = u_xlat36 * u_xlat24;
    u_xlat24 = u_xlat0 * u_xlat24;
    u_xlat24 = u_xlat16_20.x / u_xlat24;
    u_xlat16_38 = u_xlat24 + -6.10351563e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_8.xzw = vec3(u_xlat16_38) * u_xlat16_17.xyz + u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_8.xzw * u_xlat16_4.xyz + u_xlat1.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu24 = uint(int(u_xlat16_38));
    u_xlat16_8.xzw = u_xlat16_4.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu24 ; u_xlatu_loop_1++)
    {
        u_xlati1 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu13 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati1]);
        u_xlati1 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati1].www + _AdditionalLightsPosition[u_xlati1].xyz;
        u_xlat6.x = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat6.x = max(u_xlat6.x, 6.10351563e-05);
        u_xlat18 = inversesqrt(u_xlat6.x);
        u_xlat10.xyz = u_xlat13.xyz * vec3(u_xlat18);
        u_xlat30 = float(1.0) / float(u_xlat6.x);
        u_xlat6.x = u_xlat6.x * _AdditionalLightsAttenuation[u_xlati1].x + _AdditionalLightsAttenuation[u_xlati1].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
        u_xlat6.x = u_xlat6.x * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati1].xyz, u_xlat10.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati1].z + _AdditionalLightsAttenuation[u_xlati1].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat6.x = u_xlat16_38 * u_xlat6.x;
        u_xlat16_38 = dot(u_xlat16_3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat6.x;
        u_xlat16_9.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati1].xyz;
        u_xlat1.xyz = u_xlat13.xyz * vec3(u_xlat18) + u_xlat7.xyz;
        u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat37 = max(u_xlat37, 1.17549435e-38);
        u_xlat37 = inversesqrt(u_xlat37);
        u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
        u_xlat37 = dot(u_xlat16_3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
        u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
        u_xlat1.x = dot(u_xlat10.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
        u_xlat13.x = u_xlat37 * u_xlat37;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat1.x * u_xlat1.x;
        u_xlat1.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat1.x = u_xlat13.x * u_xlat1.x;
        u_xlat1.x = u_xlat0 * u_xlat1.x;
        u_xlat1.x = u_xlat16_20.x / u_xlat1.x;
        u_xlat16_38 = u_xlat1.x + -6.10351563e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_11.xyz = vec3(u_xlat16_38) * u_xlat16_17.xyz + u_xlat16_2.xyz;
        u_xlat16_8.xzw = u_xlat16_11.xyz * u_xlat16_9.xyz + u_xlat16_8.xzw;
    }
    u_xlat16_2.x = vs_TEXCOORD6.x * (-vs_TEXCOORD6.x);
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_14.xyz = u_xlat16_8.xzw + (-unity_FogColor.xyz);
    SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_14.xyz + unity_FogColor.xyz;
    return;
}