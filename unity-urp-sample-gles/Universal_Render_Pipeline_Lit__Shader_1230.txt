#version 320 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	vec4 _MainLightColor;
uniform 	vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	vec4 _AdditionalLightsColor[32];
uniform 	vec4 _AdditionalLightsAttenuation[32];
uniform 	vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 unity_FogColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	vec4 _MainLightShadowParams;
uniform 	vec4 _MainLightShadowmapSize;
uniform 	vec4 hlslcc_mtx4x4_AdditionalLightsWorldToShadow[128];
uniform 	vec4 _AdditionalShadowParams[32];
uniform 	vec4 _AdditionalShadowmapSize;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM vec4 unity_WorldTransformParams;
	UNITY_UNIFORM vec4 unity_LightData;
	UNITY_UNIFORM vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM vec4 unity_SHAr;
	UNITY_UNIFORM vec4 unity_SHAg;
	UNITY_UNIFORM vec4 unity_SHAb;
	UNITY_UNIFORM vec4 unity_SHBr;
	UNITY_UNIFORM vec4 unity_SHBg;
	UNITY_UNIFORM vec4 unity_SHBb;
	UNITY_UNIFORM vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM vec4 _BaseColor;
	UNITY_UNIFORM vec4 _SpecColor;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _Cutoff;
	UNITY_UNIFORM float _Smoothness;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _BumpScale;
	UNITY_UNIFORM float _OcclusionStrength;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
uniform mediump sampler2D _AdditionalLightsShadowmapTexture;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
bvec4 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
vec4 u_xlat11;
vec4 u_xlat12;
vec4 u_xlat13;
vec4 u_xlat14;
vec4 u_xlat15;
vec4 u_xlat16;
vec4 u_xlat17;
vec3 u_xlat18;
vec3 u_xlat19;
float u_xlat22;
mediump float u_xlat16_22;
bool u_xlatb22;
float u_xlat23;
vec2 u_xlat40;
bool u_xlatb40;
vec2 u_xlat41;
uint u_xlatu41;
vec2 u_xlat43;
vec2 u_xlat46;
vec2 u_xlat48;
float u_xlat54;
uint u_xlatu54;
float u_xlat56;
int u_xlati56;
uint u_xlatu56;
float u_xlat57;
mediump float u_xlat16_57;
int u_xlati57;
bool u_xlatb57;
float u_xlat58;
float u_xlat59;
mediump float u_xlat16_59;
float u_xlat60;
int u_xlati60;
float u_xlat61;
mediump float u_xlat16_61;
bool u_xlatb61;
float u_xlat62;
mediump float u_xlat16_62;
bool u_xlatb62;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat16_0.wxyz * _BaseColor.wxyz;
    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat54 = max(u_xlat54, 1.17549435e-38);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD2.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat5.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat4.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat4.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.yzw;
    u_xlat5.yzw = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat56 = dot(u_xlat5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat56 = (-u_xlat56) + 4.0;
    u_xlatu56 = uint(u_xlat56);
    u_xlati56 = int(int(u_xlatu56) << 2);
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati56 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati56].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati56 + 2)].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati56 + 3)].xyz;
    u_xlat56 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat57 = (-u_xlat56) + 1.0;
    u_xlat19.xyz = u_xlat1.yzw * vec3(u_xlat56);
    u_xlat0.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat56 = u_xlat57 + _Smoothness;
#ifdef UNITY_ADRENO_ES3
    u_xlat56 = min(max(u_xlat56, 0.0), 1.0);
#else
    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
#endif
    u_xlat57 = (-_Smoothness) + 1.0;
    u_xlat58 = u_xlat57 * u_xlat57;
    u_xlat58 = max(u_xlat58, 6.10351563e-05);
    u_xlat5.x = u_xlat58 * u_xlat58;
    u_xlat23 = u_xlat58 * 4.0 + 2.0;
    u_xlat19.xyz = u_xlat1.xxx * u_xlat19.xyz;
    u_xlat41.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
    u_xlat41.xy = floor(u_xlat41.xy);
    u_xlat4.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + (-u_xlat41.xy);
    u_xlat6 = u_xlat4.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
    u_xlat6.xz = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
    u_xlat7.xy = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat4.xy);
    u_xlat43.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat8.xy = min(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat43.xy;
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + u_xlat6.yw;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
    u_xlat7.xy = u_xlat43.xy * vec2(0.159999996, 0.159999996);
    u_xlat8.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
    u_xlat10.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat4.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
    u_xlat9.z = u_xlat8.x;
    u_xlat9.w = u_xlat4.x;
    u_xlat7.z = u_xlat10.x;
    u_xlat7.w = u_xlat6.x;
    u_xlat11 = u_xlat7.zwxz + u_xlat9.zwxz;
    u_xlat8.z = u_xlat9.y;
    u_xlat8.w = u_xlat4.y;
    u_xlat10.z = u_xlat7.y;
    u_xlat10.w = u_xlat6.z;
    u_xlat6.xyz = u_xlat8.zyw + u_xlat10.zyw;
    u_xlat7.xyz = u_xlat7.xzw / u_xlat11.zwy;
    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat8.xyz = u_xlat10.zyw / u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
    u_xlat7.w = u_xlat8.x;
    u_xlat9 = u_xlat41.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
    u_xlat4.xy = u_xlat41.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
    u_xlat8.w = u_xlat7.y;
    u_xlat7.yw = u_xlat8.yz;
    u_xlat10 = u_xlat41.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
    u_xlat8 = u_xlat41.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
    u_xlat7 = u_xlat41.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
    u_xlat12 = u_xlat6.xxxy * u_xlat11.zwyz;
    u_xlat13 = u_xlat6.yyzz * u_xlat11;
    u_xlat41.x = u_xlat6.z * u_xlat11.y;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat4.z);
    u_xlat16_59 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat9.zw,u_xlat4.z);
    u_xlat16_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat6.x = u_xlat16_6.x * u_xlat12.y;
    u_xlat59 = u_xlat12.x * u_xlat16_59 + u_xlat6.x;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.x = u_xlat12.z * u_xlat16_4 + u_xlat59;
    vec3 txVec3 = vec3(u_xlat8.xy,u_xlat4.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat4.x = u_xlat12.w * u_xlat16_22 + u_xlat4.x;
    vec3 txVec4 = vec3(u_xlat10.xy,u_xlat4.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
    u_xlat4.x = u_xlat13.x * u_xlat16_22 + u_xlat4.x;
    vec3 txVec5 = vec3(u_xlat10.zw,u_xlat4.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
    u_xlat4.x = u_xlat13.y * u_xlat16_22 + u_xlat4.x;
    vec3 txVec6 = vec3(u_xlat8.zw,u_xlat4.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
    u_xlat4.x = u_xlat13.z * u_xlat16_22 + u_xlat4.x;
    vec3 txVec7 = vec3(u_xlat7.xy,u_xlat4.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
    u_xlat4.x = u_xlat13.w * u_xlat16_22 + u_xlat4.x;
    vec3 txVec8 = vec3(u_xlat7.zw,u_xlat4.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
    u_xlat4.x = u_xlat41.x * u_xlat16_22 + u_xlat4.x;
    u_xlat22 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat4.x = u_xlat4.x * _MainLightShadowParams.x + u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb22 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb40 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb40 = u_xlat4.z>=1.0;
#endif
    u_xlatb22 = u_xlatb40 || u_xlatb22;
    u_xlat4.x = (u_xlatb22) ? 1.0 : u_xlat4.x;
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat22)) + (-u_xlat3.xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat40.x = (-u_xlat57) * 0.699999988 + 1.70000005;
    u_xlat57 = u_xlat57 * u_xlat40.x;
    u_xlat57 = u_xlat57 * 6.0;
    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat57);
    u_xlat16_57 = u_xlat16_6.w + -1.0;
    u_xlat57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;
    u_xlat57 = max(u_xlat57, 0.0);
    u_xlat57 = log2(u_xlat57);
    u_xlat57 = u_xlat57 * unity_SpecCube0_HDR.y;
    u_xlat57 = exp2(u_xlat57);
    u_xlat57 = u_xlat57 * unity_SpecCube0_HDR.x;
    u_xlat6.xyz = u_xlat16_6.xyz * vec3(u_xlat57);
    u_xlat40.xy = vec2(u_xlat58) * vec2(u_xlat58) + vec2(-1.0, 1.0);
    u_xlat57 = float(1.0) / u_xlat40.y;
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57);
    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(u_xlat56);
    u_xlat7.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
    u_xlat6.xyz = vs_TEXCOORD1.xyz * u_xlat19.xyz + u_xlat6.xyz;
    u_xlat56 = u_xlat4.x * unity_LightData.z;
    u_xlat57 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
    u_xlat56 = u_xlat56 * u_xlat57;
    u_xlat4.xyw = vec3(u_xlat56) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat54 = max(u_xlat54, 1.17549435e-38);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat54 = min(max(u_xlat54, 0.0), 1.0);
#else
    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
#endif
    u_xlat56 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat56 = min(max(u_xlat56, 0.0), 1.0);
#else
    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
#endif
    u_xlat54 = u_xlat54 * u_xlat54;
    u_xlat54 = u_xlat54 * u_xlat40.x + 1.00001001;
    u_xlat56 = u_xlat56 * u_xlat56;
    u_xlat54 = u_xlat54 * u_xlat54;
    u_xlat56 = max(u_xlat56, 0.100000001);
    u_xlat54 = u_xlat54 * u_xlat56;
    u_xlat54 = u_xlat23 * u_xlat54;
    u_xlat54 = u_xlat5.x / u_xlat54;
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat19.xyz;
    u_xlat4.xyw = u_xlat7.xyz * u_xlat4.xyw + u_xlat6.xyz;
    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu54 = uint(int(u_xlat54));
    u_xlat6.xyz = u_xlat4.xyw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu54 ; u_xlatu_loop_1++)
    {
        u_xlati57 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu41 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat57 = dot(unity_LightIndices[int(u_xlatu41)], ImmCB_0_0_0[u_xlati57]);
        u_xlati57 = int(u_xlat57);
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati57].www + _AdditionalLightsPosition[u_xlati57].xyz;
        u_xlat41.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat41.x = max(u_xlat41.x, 6.10351563e-05);
        u_xlat59 = inversesqrt(u_xlat41.x);
        u_xlat8.xyz = vec3(u_xlat59) * u_xlat7.xyz;
        u_xlat60 = float(1.0) / float(u_xlat41.x);
        u_xlat41.x = u_xlat41.x * _AdditionalLightsAttenuation[u_xlati57].x;
        u_xlat41.x = (-u_xlat41.x) * u_xlat41.x + 1.0;
        u_xlat41.x = max(u_xlat41.x, 0.0);
        u_xlat41.x = u_xlat41.x * u_xlat41.x;
        u_xlat41.x = u_xlat41.x * u_xlat60;
        u_xlat60 = dot(_AdditionalLightsSpotDir[u_xlati57].xyz, u_xlat8.xyz);
        u_xlat60 = u_xlat60 * _AdditionalLightsAttenuation[u_xlati57].z + _AdditionalLightsAttenuation[u_xlati57].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
        u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
        u_xlat60 = u_xlat60 * u_xlat60;
        u_xlat41.x = u_xlat41.x * u_xlat60;
        u_xlati60 = int(u_xlati57 << 2);
        u_xlat9 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4_AdditionalLightsWorldToShadow[(u_xlati60 + 1)];
        u_xlat9 = hlslcc_mtx4x4_AdditionalLightsWorldToShadow[u_xlati60] * vs_TEXCOORD2.xxxx + u_xlat9;
        u_xlat9 = hlslcc_mtx4x4_AdditionalLightsWorldToShadow[(u_xlati60 + 2)] * vs_TEXCOORD2.zzzz + u_xlat9;
        u_xlat9 = u_xlat9 + hlslcc_mtx4x4_AdditionalLightsWorldToShadow[(u_xlati60 + 3)];
        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
        u_xlat10.xy = floor(u_xlat10.xy);
        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
        u_xlat13.z = u_xlat12.x;
        u_xlat13.w = u_xlat9.x;
        u_xlat14.z = u_xlat15.x;
        u_xlat14.w = u_xlat46.x;
        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
        u_xlat12.z = u_xlat13.y;
        u_xlat12.w = u_xlat9.y;
        u_xlat15.z = u_xlat14.y;
        u_xlat15.w = u_xlat46.y;
        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
        u_xlat12.w = u_xlat13.x;
        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
        u_xlat13.w = u_xlat12.y;
        u_xlat12.yw = u_xlat13.yz;
        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
        u_xlat17 = u_xlat9.yyww * u_xlat11;
        u_xlat60 = u_xlat9.w * u_xlat11.y;
        vec3 txVec9 = vec3(u_xlat14.xy,u_xlat9.z);
        u_xlat16_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
        vec3 txVec10 = vec3(u_xlat14.zw,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
        u_xlat62 = u_xlat16_62 * u_xlat16.y;
        u_xlat61 = u_xlat16.x * u_xlat16_61 + u_xlat62;
        vec3 txVec11 = vec3(u_xlat46.xy,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
        u_xlat61 = u_xlat16.z * u_xlat16_62 + u_xlat61;
        vec3 txVec12 = vec3(u_xlat13.xy,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
        u_xlat61 = u_xlat16.w * u_xlat16_62 + u_xlat61;
        vec3 txVec13 = vec3(u_xlat15.xy,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
        u_xlat61 = u_xlat17.x * u_xlat16_62 + u_xlat61;
        vec3 txVec14 = vec3(u_xlat15.zw,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
        u_xlat61 = u_xlat17.y * u_xlat16_62 + u_xlat61;
        vec3 txVec15 = vec3(u_xlat13.zw,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
        u_xlat61 = u_xlat17.z * u_xlat16_62 + u_xlat61;
        vec3 txVec16 = vec3(u_xlat12.xy,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
        u_xlat61 = u_xlat17.w * u_xlat16_62 + u_xlat61;
        vec3 txVec17 = vec3(u_xlat12.zw,u_xlat9.z);
        u_xlat16_62 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
        u_xlat60 = u_xlat60 * u_xlat16_62 + u_xlat61;
        u_xlat61 = 1.0 + (-_AdditionalShadowParams[u_xlati57].x);
        u_xlat60 = u_xlat60 * _AdditionalShadowParams[u_xlati57].x + u_xlat61;
#ifdef UNITY_ADRENO_ES3
        u_xlatb61 = !!(0.0>=u_xlat9.z);
#else
        u_xlatb61 = 0.0>=u_xlat9.z;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb62 = !!(u_xlat9.z>=1.0);
#else
        u_xlatb62 = u_xlat9.z>=1.0;
#endif
        u_xlatb61 = u_xlatb61 || u_xlatb62;
        u_xlat60 = (u_xlatb61) ? 1.0 : u_xlat60;
        u_xlat41.x = u_xlat41.x * u_xlat60;
        u_xlat60 = dot(u_xlat2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
        u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
        u_xlat41.x = u_xlat41.x * u_xlat60;
        u_xlat9.xyz = u_xlat41.xxx * _AdditionalLightsColor[u_xlati57].xyz;
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat59) + u_xlat3.xyz;
        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat57 = max(u_xlat57, 1.17549435e-38);
        u_xlat57 = inversesqrt(u_xlat57);
        u_xlat7.xyz = vec3(u_xlat57) * u_xlat7.xyz;
        u_xlat57 = dot(u_xlat2.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
        u_xlat41.x = dot(u_xlat8.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat41.x = min(max(u_xlat41.x, 0.0), 1.0);
#else
        u_xlat41.x = clamp(u_xlat41.x, 0.0, 1.0);
#endif
        u_xlat57 = u_xlat57 * u_xlat57;
        u_xlat57 = u_xlat57 * u_xlat40.x + 1.00001001;
        u_xlat41.x = u_xlat41.x * u_xlat41.x;
        u_xlat57 = u_xlat57 * u_xlat57;
        u_xlat41.x = max(u_xlat41.x, 0.100000001);
        u_xlat57 = u_xlat57 * u_xlat41.x;
        u_xlat57 = u_xlat23 * u_xlat57;
        u_xlat57 = u_xlat5.x / u_xlat57;
        u_xlat7.xyz = vec3(u_xlat57) * u_xlat0.xyz + u_xlat19.xyz;
        u_xlat6.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat6.xyz;
    }
    u_xlat0.x = vs_TEXCOORD6.x * (-vs_TEXCOORD6.x);
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat18.xyz = u_xlat6.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = u_xlat0.xxx * u_xlat18.xyz + unity_FogColor.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}